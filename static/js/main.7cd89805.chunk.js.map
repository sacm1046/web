{"version":3,"sources":["views/Home.js","views/Notfound.js","store/flux.js","store/appContext.js","views/test.js","layout.js","serviceWorker.js","index.js"],"names":["Home","props","className","to","NotFound","getState","getStore","getActions","setStore","store","actions","Context","React","createContext","Test","injectContext","PassedComponent","state","updatedStore","setState","Object","assign","Provider","value","this","Component","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAgBeA,EAbF,SAAAC,GACT,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,oCACA,kBAAC,OAAD,CAAMC,GAAG,SAAT,YCMLC,EAbE,SAAAH,GACb,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,6C,gCCGLG,EAVE,SAAC,GAAuC,EAArCC,SAAqC,EAA3BC,WAA2B,EAAfC,SACtC,MAAO,CACHC,MAAO,GAGPC,QAAS,KCFJC,EAAUC,IAAMC,cAAc,MCa5BC,EAbF,SAAAb,GACT,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,oCACA,kBAAC,OAAD,CAAMC,GAAG,KAAT,YCULY,EFdO,SAAAC,GAgClB,OAhCqC,kDAEjC,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IAEDgB,MAAQZ,EAAS,CAClBC,SAAU,kBAAM,EAAKW,MAAMR,OAC3BF,WAAY,kBAAM,EAAKU,MAAMP,SAC7BF,SAAU,SAAAU,GAAY,OAClB,EAAKC,SAAS,CACVV,MAAOW,OAAOC,OAAO,EAAKJ,MAAMR,MAAOS,QARpC,EAFc,kGAyB7B,OACI,kBAACP,EAAQW,SAAT,CAAkBC,MAAOC,KAAKP,OAC1B,kBAACD,EAAoBQ,KAAKvB,YA3BL,GACVwB,aEahBV,EAZA,SAAAd,GACX,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,IAAIC,UAAW5B,IACjC,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,QAAQC,UAAWd,IACrC,kBAAC,IAAD,CAAOc,UAAWxB,SCDdyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCNNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SDuH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7cd89805.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-dom'\r\n\r\nconst Home = props => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <h1>Home</h1>\r\n                    <Link to=\"/test\">TEST</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst NotFound = props => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <h1>Not Found</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default NotFound;","const getState = ({ getStore, getActions, setStore }) => {\r\n    return {\r\n        store: {\r\n           \r\n        },\r\n        actions: {\r\n           \r\n        }\r\n    }\r\n}\r\nexport default getState;","import React, { Component } from 'react';\nimport getState from './flux';\n\nexport const Context = React.createContext(null);\n\nconst injectContext = PassedComponent => {\n    class StoreWrapper extends Component {\n        constructor(props) {\n            super(props);\n            //this will be passed as the contenxt value\n            this.state = getState({\n                getStore: () => this.state.store,\n                getActions: () => this.state.actions,\n                setStore: updatedStore =>\n                    this.setState({\n                        store: Object.assign(this.state.store, updatedStore)\n                    })\n            });\n        }\n        componentDidMount() {\n            /**\n             * EDIT THIS!\n             * This function is the equivalent to \"window.onLoad\", it only run once on the entire application lifetime\n             * you should do your ajax requests or fetch api requests here\n             **/\n        }\n        render() {\n            // the initial value for the context its not null anymore, but the current state of this component,\n            // the context will have a getStore and setStore functions available then, because they were declared\n            // on the state of this component\n            return (\n                <Context.Provider value={this.state}>\n                    <PassedComponent {...this.props} />\n                </Context.Provider>\n            );\n        }\n    }\n    return StoreWrapper;\n}\nexport default injectContext;","import React from 'react';\r\nimport { Link } from 'react-dom'\r\n\r\nconst Test = props => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <h1>Test</h1>\r\n                    <Link to=\"/\">HOME</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test;","import React from 'react'\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport Home from './views/Home'\r\nimport NotFound from './views/Notfound'\r\nimport injectContext from './store/appContext'\r\nimport Test from './views/test'\r\n\r\nconst Layout = props => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route exact path=\"/test\" component={Test} />\r\n                <Route component={NotFound} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default injectContext(Layout);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport Layout from './layout';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\n\r\nimport 'jquery';\r\nimport 'popper.js';\r\nimport 'bootstrap';\r\n\r\nReactDOM.render(<Layout />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}